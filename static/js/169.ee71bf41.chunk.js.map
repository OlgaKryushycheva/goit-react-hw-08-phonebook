{"version":3,"file":"static/js/169.ee71bf41.chunk.js","mappings":"yPAcaA,EAAY,WACvB,IAAMC,GAAYC,EAAAA,EAAAA,MAYlB,OACE,SAAC,KAAD,CACEC,cAZW,CACbC,MAAO,GACPC,SAAU,IAWRC,iBAAkBC,EAAAA,GAClBC,SATiB,SAACC,EAAQC,GAC5BT,GAAUU,EAAAA,EAAAA,IAAMF,IAChBC,EAAQE,WACT,EAGC,UAKE,UAAC,KAAD,YACE,UAAC,KAAD,oBAEE,SAAC,KAAD,CAAOC,KAAK,QAAQC,KAAK,WACzB,SAAC,KAAD,CAAcD,KAAK,QAAQE,UAAW,aAGxC,UAAC,KAAD,sBAEE,SAAC,KAAD,CAAOF,KAAK,WAAWC,KAAK,cAC5B,SAAC,KAAD,CAAcD,KAAK,WAAWE,UAAW,aAG3C,SAAC,KAAD,CAAKD,KAAK,SAAV,wBAIP,ECrCD,EATc,WACZ,OACE,iCACE,SAAC,KAAD,8BACA,SAACd,EAAD,MAGL,C,sHCRYgB,EAAeC,EAAAA,KAAaC,MAAM,CAC7CL,KAAMI,EAAAA,KACHE,IAAI,EAAG,yCACPC,IAAI,GAAI,0CACRC,SAAS,oBACZjB,MAAOa,EAAAA,KAAab,MAAM,iBAAiBiB,SAAS,qBACpDhB,SAAUY,EAAAA,KACPI,SAAS,yBACTF,IAAI,EAAG,sDACPG,QAAQ,WAAY,8CAIZf,EAAcU,EAAAA,KAAaC,MAAM,CAC5Cd,MAAOa,EAAAA,KAAab,MAAM,iBAAiBiB,SAAS,qBACpDhB,SAAUY,EAAAA,KACPI,SAAS,yBACTF,IAAI,EAAG,sDACPG,QAAQ,WAAY,8CAGZC,EAAgBN,EAAAA,KAAaC,MAAM,CAC9CL,KAAMI,EAAAA,KACHE,IAAI,EAAG,yCACPC,IAAI,GAAI,yCACRC,SAAS,oBACZG,OAAQP,EAAAA,KACLK,QAAQ,iBAAkB,iCAC1BD,SAAS,sBAKkBJ,EAAAA,KAAaC,MAAM,CACjDL,KAAMI,EAAAA,KACHE,IAAI,EAAG,yCACPC,IAAI,GAAI,0CACRC,SAAS,oBACZG,OAAQP,EAAAA,KACLK,QAAQ,iBAAkB,mJAC1BD,SAAS,oBACZjB,MAAOa,EAAAA,KAAab,MAAM,iBAAiBiB,SAAS,qBACpDhB,SAAUY,EAAAA,KACPI,SAAS,yBACTF,IAAI,EAAG,sDACPG,QAAQ,WAAY,6C","sources":["components/LoginForm.jsx","psges/Login.jsx","validation.js"],"sourcesContent":["import { Formik } from 'formik';\nimport { useDispatch } from 'react-redux';\n\nimport { logIn } from 'redux/auth/thunks';\nimport { LoginSchema } from 'validation';\n\nimport {\n  Label,\n  Form,\n  ErrorMessage,\n  Field,\n  Btn,\n} from '../Styles/StyleForm.styled';\n\nexport const LoginForm = () => {\n  const disppatch = useDispatch();\n\n  const values = {\n    email: '',\n    password: '',\n  };\n\n  const handleSubmit = (values, actions) => {\n    disppatch(logIn(values));\n    actions.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={values}\n      validationSchema={LoginSchema}\n      onSubmit={handleSubmit}\n    >\n      <Form>\n        <Label>\n          Email\n          <Field name=\"email\" type=\"email\" />\n          <ErrorMessage name=\"email\" component={'span'} />\n        </Label>\n\n        <Label>\n          Pasword\n          <Field name=\"password\" type=\"password\" />\n          <ErrorMessage name=\"password\" component={'span'} />\n        </Label>\n\n        <Btn type=\"submit\">Log in</Btn>\n      </Form>\n    </Formik>\n  );\n};\n","import { LoginForm } from 'components/LoginForm';\n\nimport { Title } from 'Styles/StyleForm.styled';\n\nconst Login = () => {\n  return (\n    <>\n      <Title>Please, log in</Title>\n      <LoginForm />\n    </>\n  );\n};\n\nexport default Login;\n","import * as Yup from 'yup';\n\n// схему валидации должен давать бэкэнд?\nexport const SignupSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(5, 'Too short - should be 5 chars minimum')\n    .max(20, 'Too lond! - should be 20 chars maximum')\n    .required('No name provided'),\n  email: Yup.string().email('Invalid email').required('No email provided'),\n  password: Yup.string()\n    .required('No password provided.')\n    .min(6, 'Password is too short - should be 6 chars minimum.')\n    .matches(/[a-zA-Z]/, 'Password can only contain Latin letters.'),\n});\n\n// схему валидации должен давать бэкэнд?\nexport const LoginSchema = Yup.object().shape({\n  email: Yup.string().email('Invalid email').required('No email provided'),\n  password: Yup.string()\n    .required('No password provided.')\n    .min(6, 'Password is too short - should be 6 chars minimum.')\n    .matches(/[a-zA-Z]/, 'Password can only contain Latin letters.'),\n});\n\nexport const ContactSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(5, 'Too short - should be 5 chars minimum')\n    .max(20, 'Too lond - should be 20 chars maximum')\n    .required('No name provided'),\n  number: Yup.string()\n    .matches(/[+3][0-9]{12}$/, 'Phone should be +380000000000')\n    .required('No name provided'),\n});\n\n// можно ли сделать 1 валюдацию на все? пока так не работает\n// (не сабмитится - наверное потому что не все параметры)\nexport const validationSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(5, 'Too short - should be 5 chars minimum')\n    .max(20, 'Too lond! - should be 20 chars maximum')\n    .required('No name provided'),\n  number: Yup.string()\n    .matches(/[+3][0-9]{12}$/, 'Заполните поле в формате +380000000000')\n    .required('No name provided'),\n  email: Yup.string().email('Invalid email').required('No email provided'),\n  password: Yup.string()\n    .required('No password provided.')\n    .min(6, 'Password is too short - should be 6 chars minimum.')\n    .matches(/[a-zA-Z]/, 'Password can only contain Latin letters.'),\n});\n"],"names":["LoginForm","disppatch","useDispatch","initialValues","email","password","validationSchema","LoginSchema","onSubmit","values","actions","logIn","resetForm","name","type","component","SignupSchema","Yup","shape","min","max","required","matches","ContactSchema","number"],"sourceRoot":""}